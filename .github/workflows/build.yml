name: Build

on: [push, pull_request, workflow_dispatch]

permissions:
  attestations: write
  contents: read
  id-token: write

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.6
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: "3.12.3"
      - name: Update pipx
        run: |
          pip install --upgrade pipx
          pipx --version
      - name: Add pipx apps to PATH
        run: |
          echo "/root/.local/bin" >> $GITHUB_PATH
          echo "/opt/pipx_bin" >> $GITHUB_PATH
      - name: Install Python dependencies
        run: sudo pipx --global install meson ninja

      - name: Install APT dependencies
        run: |
          wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | sudo tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ jammy main' | sudo tee /etc/apt/sources.list.d/kitware.list >/dev/null

          wget -qO- https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo tee /etc/apt/trusted.gpg.d/lunarg.asc
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-jammy.list https://packages.lunarg.com/vulkan/lunarg-vulkan-jammy.list

          sudo apt update
          sudo apt install -y cmake glslang-dev shaderc vulkan-headers

      - name: Checkout SPIRV
        uses: actions/checkout@v4.1.5
        with:
          repository: KhronosGroup/SPIRV-Cross
          ref: sdk-1.3.236.0
          path: temp/SPIRV-Cross
      - name: Install SPIRV
        working-directory: ./temp/SPIRV-Cross
        run: |
          cmake -H. -Bbuild -GNinja -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DSPIRV_CROSS_SHARED=ON -DSPIRV_CROSS_CLI=OFF \
            -DSPIRV_CROSS_ENABLE_TESTS=OFF ..
          sudo /opt/pipx_bin/ninja -Cbuild install

      - name: Checkout VapourSynth
        uses: actions/checkout@v4.1.5
        with:
          repository: vapoursynth/vapoursynth
          ref: R68
          path: vapoursynth
      - name: Install VapourSynth
        run: |
          git clone https://bitbucket.org/the-sekrit-twc/zimg.git --depth 1 --recurse-submodules --shallow-submodules
          pushd zimg
          ./autogen.sh
          ./configure --prefix=/usr
          sudo make install -j$(nproc)
          popd

          pushd vapoursynth
          ./autogen.sh
          ./configure --prefix=/usr --disable-python-module --disable-vsscript
          sudo make install -j$(nproc)

      - name: Build vs-placebo
        run: |
          meson setup build --buildtype release -Dlibplacebo:demos=false -Dlibplacebo:glslang=enabled
          meson compile -vC build

  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          msystem: UCRT64
          update: true
          install: >-
            base-devel
            mingw-w64-ucrt-x86_64-jq
            mingw-w64-ucrt-x86_64-gcc
            mingw-w64-ucrt-x86_64-pkg-config
            mingw-w64-ucrt-x86_64-vapoursynth
            mingw-w64-ucrt-x86_64-meson
            mingw-w64-ucrt-x86_64-ninja
            mingw-w64-ucrt-x86_64-spirv-tools
            mingw-w64-ucrt-x86_64-spirv-cross
            mingw-w64-ucrt-x86_64-vulkan
            mingw-w64-ucrt-x86_64-vulkan-headers
            mingw-w64-ucrt-x86_64-vulkan-loader
            mingw-w64-ucrt-x86_64-libdovi
            mingw-w64-ucrt-x86_64-lcms2
            mingw-w64-ucrt-x86_64-shaderc
      - name: Build vs-placebo
        run: |
          meson setup build --buildtype release --prefer-static --default-library=static -Dcpp_link_args='-static' -Dlibplacebo:demos=false -Dlibplacebo:glslang=enabled
          meson compile -vC build
      - name: Attest build provenance
        uses: actions/attest-build-provenance@v1.1.2
        if: ${{ github.event_name == 'push' }}
        with:
          subject-path: build/libvs_placebo.dll
      - name: Export version
        run: |
          echo "ARTIFACT_VERSION=$(meson introspect --projectinfo build | jq -r '.version')" >> $GITHUB_ENV
      - name: Upload
        uses: actions/upload-artifact@v4.3.6
        with:
          name: vsplacebo-windows-${{ env.ARTIFACT_VERSION }}
          path: build/libvs_placebo.dll

  build-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
        with:
          submodules: recursive
      - uses: docker/setup-qemu-action@v3.2.0
      - uses: docker/setup-buildx-action@v3.6.1
      - name: Build Docker image
        uses: docker/build-push-action@v6.7.0
        with:
          file: ./docker/Dockerfile.x86_64-w64-mingw32
          context: .
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: false
